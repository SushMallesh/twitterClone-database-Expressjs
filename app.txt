const express = require("express");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const path = require("path");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcrypt");

const app = express();
app.use(express.json());

const dbPath = path.join(__dirname, "twitterClone.db");
// initialize database and server
let database = null;
const initializeDBAndServer = async () => {
  try {
    database = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(4000, () => {
      console.log("Server is running at http://localhost:4000");
    });
  } catch (err) {
    console.log(`DB Error: ${err.message}`);
    process.exit(1);
  }
};
initializeDBAndServer();

//convert the table columns into response format

const convertTweetTable = (tweetOb) => {
  return {
    tweetId: tweetOb.tweet_id,
    tweet: tweetOb.tweet,
    userId: tweetOb.user_id,
    dateTime: tweetOb.date_time,
  };
};

// API to register user
app.post("/register/", async (request, response) => {
  const { username, password, name, gender } = request.body;
  const hashedPassword = await bcrypt.hash(password, 10);

  const getUserQuery = `SELECT * FROM user 
    WHERE username = '${username}';`;

  const dbUser = await database.get(getUserQuery);
  if (dbUser !== undefined) {
    response.status(400);
    response.send("User already exists");
  } else {
    if (password.length < 6) {
      response.status(400);
      response.send("Password is too short");
    } else {
      const createUserQuery = `INSERT INTO user 
            (username,password,name,gender) 
            VALUES ('${username}',
                    '${hashedPassword}',
                    '${name}',
                    '${gender}');`;
      await database.run(createUserQuery);
      response.send("User created successfully");
    }
  }
});

//API to login user

app.post("/login/", async (request, response) => {
  const { username, password } = request.body;
  const getUserQuery = `SELECT * FROM user 
    WHERE username = '${username}';`;
  let jwtToken;
  const dbUser = await database.get(getUserQuery);
  if (dbUser === undefined) {
    response.status(400);
    response.send("Invalid user");
  } else {
    const isPasswordMatched = await bcrypt.compare(password, dbUser.password);
    if (isPasswordMatched === true) {
      const payload = { username: username };
      jwtToken = jwt.sign(payload, "mySecretCode");
      response.send({ jwtToken: jwtToken });
    } else {
      response.status(400);
      response.send("Invalid password");
    }
  }
});

// middleware function to authenticate jwtToken

const authenticateToken = (request, response, next) => {
  let jwtToken;
  const authHeader = request.header("authorization");
  if (authHeader !== undefined) {
    jwtToken = authHeader.split(" ")[1];
  }
  if (jwtToken === undefined) {
    response.status(401);
    response.send("Invalid JWT Token");
  } else {
    jwt.verify(jwtToken, "mySecretCode", async (error, payload) => {
      if (error) {
        response.status(401);
        response.send("Invalid JWT Token");
      } else {
        request.username = payload.username;
        next();
      }
    });
  }
};

app.get("/user/tweets/feed/", authenticateToken, async (request, response) => {
  const { username } = request;
  const getUserId = `SELECT user_id FROM user 
  WHERE username='${username}';`;
  const userId = await database.get(getUserId);

  const getTweetsQuery = `
  SELECT username,tweet,date_time
  FROM (user INNER JOIN follower ON
      user.user_id = follower.following_user_id) AS T
      INNER JOIN tweet ON T.user_id = tweet.user_id
      WHERE follower_user_id = ${userId.user_id}
      ORDER BY date_time DESC
      LIMIT 4;`;
  const tweetList = await database.all(getTweetsQuery);
  response.send(
    tweetList.map((eachTweet) => ({
      username: eachTweet.username,
      tweet: eachTweet.tweet,
      dateTime: eachTweet.date_time,
    }))
  );
});

// API to list of all names of people whom the user follows
app.get("/user/following/", authenticateToken, async (request, response) => {
  const { username } = request;
  const getUserId = `SELECT user_id FROM user 
  WHERE username = '${username}';`;
  const userId = await database.get(getUserId);

  const getUserFollowsQuery = `
  SELECT name FROM user INNER JOIN follower ON
  user.user_id = follower.following_user_id 
  WHERE follower.follower_user_id = ${userId.user_id};`;

  const userFollowingList = await database.all(getUserFollowsQuery);
  response.send(userFollowingList);
});

// API to get people who follow user

app.get("/user/followers/", authenticateToken, async (request, response) => {
  const { username } = request;
  const getUserId = `SELECT user_id FROM user 
    WHERE username = '${username}';`;
  const userId = await database.get(getUserId);

  const getUserFollowersQuery = `SELECT name 
  FROM user INNER JOIN follower ON 
    user.user_id = follower.follower_user_id 
    WHERE follower.following_user_id = ${userId.user_id};`;
  const followersList = await database.all(getUserFollowersQuery);
  response.send(followersList);
});

// API to get a tweet of the user is following,likes count, replies count and date-time

app.get("/tweets/:tweetId/", authenticateToken, async (request, response) => {
  const { tweetId } = request.params;
  const { username } = request;
  const getUserId = `SELECT user_id FROM user
  WHERE username = '${username}';`;
  const userId = await database.get(getUserId);

  const getOtherTweet = `SELECT tweet_id 
    FROM tweet INNER JOIN follower ON 
    follower.following_user_id = tweet.user_id 
    WHERE follower.follower_user_id = ${userId.user_id};`;

  const followingUserTweets = await database.all(getOtherTweet);

  const tweets = followingUserTweets.map((tweet) => tweet.tweet_id);

  const getTweetQuery = `SELECT tweet,COUNT(like_id),COUNT(reply_id),
    tweet.date_time
    FROM tweet
    LEFT JOIN reply ON reply.tweet_id = tweet.tweet_id
    LEFT JOIN like ON like.tweet_id = tweet.tweet_id
    WHERE tweet.tweet_id = ${tweetId}
    GROUP BY tweet.tweet_id;`;

  const db = await database.get(getTweetQuery);

  if (tweets.includes(parseInt(tweetId))) {
    response.send({
      tweet: db.tweet,
      likes: db["COUNT(like_id)"],
      replies: db["COUNT(reply_id)"],
      dateTime: db.date_time,
    });
  } else {
    response.status(401);
    response.send("Invalid Request");
  }
});

// API to get list of usernames who liked the tweet
app.get(
  "/tweets/:tweetId/likes/",
  authenticateToken,
  async (request, response) => {
    const { tweetId } = request.params;
    const { username } = request;

    const getUserId = `SELECT user_id FROM user 
    WHERE username = '${username}';`;
    const userId = await database.get(getUserId);

    const getOtherTweet = `SELECT tweet_id 
    FROM tweet INNER JOIN follower ON 
    follower.following_user_id = tweet.user_id 
    WHERE follower.follower_user_id = ${userId.user_id};`;

    const followingUserTweets = await database.all(getOtherTweet);

    const tweets = followingUserTweets.map((tweet) => tweet.tweet_id);

    const getTweetLikeQuery = `
    SELECT username FROM user INNER JOIN like ON
    user.user_id = like.user_id
    WHERE like.tweet_id = ${tweetId} ;`;

    const db = await database.all(getTweetLikeQuery);

    if (tweets.includes(parseInt(tweetId))) {
      response.send({ likes: db.map((user) => user.username) });
    } else {
      response.status(401);
      response.send("Invalid Request");
    }
  }
);

//API to get list of replies of a user the user follows

app.get(
  "/tweets/:tweetId/replies/",
  authenticateToken,
  async (request, response) => {
    const { tweetId } = request.params;
    const { username } = request;
    const getUserId = `SELECT user_id FROM user 
    WHERE username = '${username}';`;
    const userId = await database.get(getUserId);
    const getOtherTweet = `SELECT tweet_id 
    FROM tweet INNER JOIN follower ON 
    follower.following_user_id = tweet.user_id 
    WHERE follower.follower_user_id = ${userId.user_id};`;

    const followingUserTweets = await database.all(getOtherTweet);

    const tweets = followingUserTweets.map((tweet) => tweet.tweet_id);

    const getReplyQuery = `
    SELECT name,reply FROM user LEFT JOIN follower ON
    follower.following_user_id = user.user_id
    LEFT JOIN reply ON user.user_id = reply.user_id
    WHERE reply.tweet_id = ${tweetId} AND 
    follower.follower_user_id = ${userId.user_id};`;

    const db = await database.all(getReplyQuery);
    if (tweets.includes(parseInt(tweetId))) {
      response.send({ replies: db });
    } else {
      response.status(401);
      response.send("Invalid Request");
    }
  }
);

//API to get list of all tweets of the user

app.get("/user/tweets/", authenticateToken, async (request, response) => {
  const { username } = request;
  const getUserId = `SELECT user_id FROM user 
    WHERE username = '${username}';`;
  const userId = await database.get(getUserId);

  //   const getUserTweetsQuery = `SELECT tweet,COUNT(like_id),COUNT(reply_id),
  //     tweet.date_time
  //   FROM tweet LEFT JOIN reply ON reply.tweet_id = tweet.tweet_id
  //     LEFT JOIN like ON like.tweet_id = tweet.tweet_id
  //     WHERE tweet.user_id = ${userId.user_id}
  //     GROUP BY tweet.tweet_id;`;

  const getUserTweetsQuery = `SELECT tweet,COUNT(like_id),
  COUNT(reply_id),tweet.date_time 
  FROM tweet LEFT JOIN reply ON reply.tweet_id = tweet.tweet_id 
  LEFT JOIN like ON tweet.tweet_id = like.tweet_id 
  WHERE tweet.user_id = ${userId.user_id}
  GROUP BY tweet.tweet_id;`;
  const db = await database.all(getUserTweetsQuery);

  response.send(
    db.map((user) => ({
      tweet: user.tweet,
      likes: user["COUNT(like_id)"],
      replies: user["COUNT(reply_id)"],
      dateTime: user.date_time,
    }))
  );
});

//API to create a tweet

app.post("/user/tweets/", authenticateToken, async (request, response) => {
  const { username } = request;
  const getUserId = `SELECT user_id FROM user 
    WHERE username = '${username}';`;
  const userId = await database.get(getUserId);

  const { tweet } = request.body;
  const getCreateQuery = `
    INSERT INTO tweet (tweet,user_id) VALUES ('${tweet}',${userId.user_id});`;
  await database.run(getCreateQuery);
  response.send("Created a Tweet");
});

// API to delete the user's tweet

app.delete(
  "/tweets/:tweetId/",
  authenticateToken,
  async (request, response) => {
    const { tweetId } = request.params;
    const { username } = request;
    const getUserId = `SELECT user_id FROM user 
    WHERE username = '${username}';`;
    const userId = await database.get(getUserId);

    const getQuery = `
    SELECT tweet_id FROM tweet WHERE user_id = ${userId.user_id};`;

    const usersTweets = await database.all(getQuery);
    const userTweets = usersTweets.map((tweet) => tweet.tweet_id);
    if (userTweets.includes(parseInt(tweetId))) {
      const getDeleteQuery = `DELETE FROM tweet
        WHERE tweet_id = ${tweetId}
        AND user_id = ${userId.user_id};`;
      await database.run(getDeleteQuery);
      response.send("Tweet Removed");
    } else {
      response.status(401);
      response.send("Invalid Request");
    }
  }
);

module.exports = app;
